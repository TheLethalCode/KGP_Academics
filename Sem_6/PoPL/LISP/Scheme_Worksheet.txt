Arithmetic Expressions:

prefix notation

(+ 3 (* 4 5))

(+ 3 5)
(fac 6)
(append '(a b c) '(1 2 3 4))


(- 10 3) → 7
(- 10 3 5)  → 2
(* 2 3) → 6
(* 2 3 4) → 24
(/ 29 3) → 29/3
(/ 29 3 7) → 29/21
(/ 9 6) → 3/2

(quotient 7 3) → 2
(modulo 7 3) → 1
(sqrt 8) → 2.8284271247461903


-----------------------------------------------------------------------------------------------------------------------
Lists and Operations:


cons, car, cdr, list and quote.

Lists are the basic structured data type in Scheme. Note that in the following examples the parameters are quoted. The quote prevents Scheme from evaluating the arguments. 

 (cons '1 '(2 3 4))

 (cons '1 (2 3 4)) error not applicable

car
returns the first member of a list or dotted pair.

         (car '(123 245 564 898))             is   123
         (car '(first second third))           is   first
         (car '(this (is no) more difficult))   is  this


cdr
returns the list without its first item, or the second member of a dotted pair.

         (cdr '(7 6 5))               is  (6 5)
         (cdr '(it rains every day))  is  (rains every day)
         (cdr (cdr '(a b c d e f)))   is   (c d e f)
         (car (cdr '(a b c d e f)))   is   b


 length
    returns the length of a list.

         (length '(1 3 5 9 11))                 is  5

reverse
    returns the list reversed.

         (reverse '(1 3 5 9 11)) is  (11 9 5 3 1)

append
    returns the concatenation of two lists.

         (append '(1 3 5)  '(9 11))  is  (1 3 5 9 11)

 since we might even want to treat a valid procedure application such as (+ 3 4) as a list. The answer is that we must tell Scheme explicitly to treat a list as data rather than as a procedure application. We do this with quote. 


(quote (1 2 3 4 5)) -> (1 2 3 4 5)
(quote ("this" "is" "a" "list")) -> ("this" "is" "a" "list")
(quote (+ 3 4)) -> (+ 3 4)

same as above expressions

'(1 2 3 4) -> (1 2 3 4)
'((1 2) (3 4)) -> ((1 2) (3 4))
'(/ (* 2 -1) 3) -> (/ (* 2 -1) 3)


(quote (quote cons))?

---------------------------------------------------------------------------------------------------------------
If - else and Case Statements:  

different return types allowed, due to dynamically typed

(if (> 3 2) 'yes '3)




 (cond ((> 3 2) 'greater)
                ((< 3 2) 'less))                  =>  greater
          
          (cond ((> 3 3) 'greater)
                ((< 3 3) 'less)
                (else 'equal))                    =>  equal



     (case (* 2 1)
             ((2 3 5 7) '1)
             ((1 4 6 8 9) 'composite))            =>  composite

          (case (* 2 3)
             ((2 3 5 7) 'prime)
             ((1 4 6 8 9) 'composite))            =>  composite
          
          (case (car '(c d))
             ((a) 'a)
             ((b) 'b))                            =>  unspecified
          
          (case (car '(c d))
             ((a e i o u) 'vowel)
             ((w y) 'semivowel)
             (else 'consonant))                   =>  consonant

------------------------------------------------------------------------------------------------------------------

AND  OR Expressions:

          (and (= 2 2) (> 2 1))                   =>  #t
          (and (= 2 2) (< 2 1))                   =>  #f
          (and 1 2 'c '(f g))                     =>  (f g)
          (and)                                   =>  #t
     

            (or (= 2 2) (> 2 1))                    =>  #t
          (or (= 2 2) (< 2 1))                    =>  #t
          (or #f #f #f)                           =>  #f
          (or (memq 'b '(a b c)) (/ 3 0))         =>  (b c)

-----------------------------------------------------------------------------------------------------------------------------
Let Expressions:


(let ((x 2))
  (+ x 3)) ->  5

(let ((y 3))
  (+ 2 y))-> 5

(let ((x 2) (y 3))
  (+ x y)) ->  5


(let ((list1 '(a b c)) (list2 '(d e f)))
  (cons (cons (car list1)
              (car list2))
        (cons (car (cdr list1))
              (car (cdr list2))))) -> ((a . d) b . e)


Nested Let expressions:

(let ([a 4] [b -3])
  (let ([a-squared (* a a)]
        [b-squared (* b b)])
    (+ a-squared b-squared))) -> 25



(let ([x 1])
  (let ([x (+ x 1)])   --- Inner scope
    (+ x x))) -> 4


---------------------------------------------------------------------------------------------------
Functions:

(define pi 3.14)

--------------------------------------------------------------


Lambda Expression


((lambda (x) (+ x x)) (* 3 4))  - Anonymous


(define square (lambda (x)  (* x x)))  - bindings

Factorial function

(define fac
           (lambda (n)
                   (if (= n 0)
                          1
                          (* n (fac (- n 1))))))

----------------------------------------------------------------------------------------------------------------------

Input and Output Expressions


(+ 3 (read))

(display (+ 3 (read)))


(define prompt-read (lambda (Prompt)
   (display Prompt)
   (read)))



-----------------------------------------------------------------------------------------------------------------



Some Fucntions

 The function apply returns the result of applying its first argument to its second argument.

1 ]=>  (apply + '(7 5))

;Value:   12

1 ]=>  (apply max '(3 7 2 9))

;Value:   9

The function map returns a list which is the result of applying its first argument to each element of its second argument.

1 ]=>   (map odd? '(2 3 4 5 6))

;Value: (() #T () #T ())

Here is an example of a ``curried'' function passed as a parameter. dbl is a dubbling function.

1 ]=> (define dbl (lambda (x) (* 2 x)))

;Value: dbl

1 ]=> (map dbl '(1 2 3 4))

;Value: (2 4 6 8)

1 ]=>

The previous example could also be written as:

1 ]=> (map (* 2) '(1 2 3 4))

;Value: (2 4 6 8)

------------------------------------------------------------------------------------------------------


